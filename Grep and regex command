Uisng grep and Regex to extract IPS 

For scenarios where this regex doesn't work as expected due to limitations in the grep version or regex engine, consider using perl-compatible regular expressions with grep -P 
(though note that -P is not supported in all grep versions):

sh

grep -Po '\b(?!192\.168\.)(?!10\.)(?!172\.(1[6-9]|2[0-9]|3[0-1])\.)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b' filename

This uses Perl-compatible regular expressions, which support the negative lookahead assertions used in your pattern. 
However, always test your regex to ensure it behaves as expected, especially with complex patterns and different tools.


Using regular expressions (regex) with the grep command allows you to filter input based on complex patterns. 
However, grep's default behavior supports basic regular expressions (BRE), and for extended patterns (like the one you've provided), you should use egrep (or grep -E), which supports Extended Regular Expressions (ERE).

The regex you've provided is designed to match IP addresses that are not in private IP ranges. 
To explain briefly, it looks for IP addresses that don't start with 192.168., 10., and 172. 
(for the latter, only the ranges 172.16.x.x through 172.31.x.x are considered private).

The regex can be seen below.
################### STARTS HERE #################################################################
\b(?!192\.168\.)(?!10\.)(?!172\.(1[6-9]|2[0-9]|3[0-1])\.)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b
################### ENDS HERE ###################################################################

grep -E enables the use of Extended Regular Expressions.
The -o option makes grep output only the parts of the lines that match the pattern, which is useful when you're looking for specific segments like IP addresses within a larger body of text.
Finally, replace filename with the name of the file you wish to search through. 
If you're piping output from another command, simply omit the filename.


To filter the IP addresses that are associated with the term "invalid user" from your `auth.log`, and given that you're already using a regex pattern to exclude certain IP ranges, you can chain your commands using pipes (`|`) to further filter the output. Here's how you can do it:

1. Use the first `grep` command with `-P` and `-o` options to match and output IP addresses that are not in the specified private ranges.
2. Pipe this output to another `grep` command to filter lines containing "invalid user".

However, based on your current approach, adjusting it to directly search for lines with "invalid user" and then extracting IP addresses that don't belong to private ranges would be more efficient. Here's how you can adjust your command:

```sh
grep "invalid user" auth.log | grep -Po '\b(?!192\.168\.)(?!10\.)(?!172\.(1[6-9]|2[0-9]|3[0-1])\.)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b'
```

This command does the following:
- The first `grep "invalid user" auth.log` filters lines that contain the term "invalid user" from `auth.log`.
- Then, `| grep -Po '\b(?!192\.168\.)(?!10\.)(?!172\.(1[6-9]|2[0-9]|3[0-1])\.)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b'` takes this filtered output and extracts IP addresses not in private ranges.

By structuring the command this way, you're efficiently narrowing down the log entries to those that are specifically related to "invalid user" attempts and then applying your IP address pattern to those entries. This approach should give you a list of IP addresses associated with "invalid user" entries that don't fall within the specified private IP address ranges.
